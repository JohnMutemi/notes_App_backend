from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy import Text
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '05194a185ce5'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # Create an inspector object to inspect the database
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)
    
    # Only create 'note' table if it does not exist
    if 'note' not in inspector.get_table_names():
        op.create_table('note',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('title', sa.String(length=200), nullable=False),
            sa.Column('content', sa.Text(), nullable=False),
            sa.Column('module', sa.String(length=50), nullable=False),
            sa.Column('category', sa.String(length=50), nullable=True),
            sa.Column('subtopics', postgresql.JSON(astext_type=Text()), nullable=True),
            sa.PrimaryKeyConstraint('id', name=op.f('pk_note'))
        )

    # Create 'comments' table if it doesn't exist
    if 'comments' not in inspector.get_table_names():
        op.create_table('comments',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('content', sa.Text(), nullable=False),
            sa.Column('note_id', sa.Integer(), nullable=False),
            sa.Column('timestamp', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['note_id'], ['note.id'], name=op.f('fk_comments_note_id_note'), ondelete='CASCADE'),
            sa.PrimaryKeyConstraint('id', name=op.f('pk_comments'))
        )

def downgrade():
    # ### commands auto-generated by Alembic - please adjust! ###
    op.drop_table('comments')
    op.drop_table('note')
    # ### end Alembic commands ###
